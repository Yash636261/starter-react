{"version":3,"sources":["compnents/about.js","compnents/Navbar.js","compnents/textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","MyStyle","setMyStyle","_useState3","_useState4","btnText","setbtnText","react_default","a","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","props","concat","mode","react_router_dom","to","title","aria-label","toggleMode","htmlFor","TextForm","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","navigator","clipboard","writeText","then","success","alert","err","console","log","split","length","prototype","PropTypes","string","defaultProps","App","Mode","setMode","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.098d5fb3.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n    \r\n    const [MyStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btnText, setbtnText] = useState(\"enable dark mode\")\r\n    const toggleStyle = () =>{\r\n        if(MyStyle.color === 'black'){\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setbtnText(\"enable light mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setbtnText(\"enable dark mode\");\r\n        }\r\n    }\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={MyStyle}>\r\n        <h2 className='my-2'>About Us</h2>\r\n        <div>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={MyStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={MyStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={MyStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={MyStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={MyStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={MyStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={MyStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className='container my-2'>\r\n            <button onClick={toggleStyle} className='btn btn-primary my-2'>{btnText}</button>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\"  to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">about</Link>\r\n            </li>\r\n          </ul>\r\n      <div className=\"custom-control custom-switch\">\r\n        <input type=\"checkbox\" className=\"custom-control-input\" onClick={props.toggleMode} id=\"customSwitch1\"/>\r\n        <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">enable darkmode</label>\r\n      </div>\r\n    </div>\r\n</div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.prototype={\r\n    title: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps= {\r\n    title: 'add title'\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const ToUpperCase = () =>{\r\n    let newText= text.toUpperCase()\r\n    setText(newText)\r\n  }\r\n  const ToLowerCase = () =>{\r\n    let newText= text.toLowerCase()\r\n    setText(newText)\r\n  }\r\n  const ToCopy =() =>{\r\n    navigator.clipboard\r\n      .writeText(text)\r\n      .then(\r\n        (success) => alert(\"text copied\"),\r\n        (err) => console.log(\"error copying text\")\r\n      );\r\n  }\r\n  const OnChange = (event) =>{\r\n    setText(event.target.value)\r\n  }\r\n  const [text, setText] = useState('enter text here');\r\nreturn (\r\n  <>\r\n  <div className=\"container\">\r\n    <h1>{props.heading}</h1>\r\n      <div>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={OnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n      </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={ToUpperCase}>convert to uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={ToLowerCase}>convert to lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={ToCopy}>copy text</button>\r\n    </div>\r\n  </div>\r\n  <div className=\"container\">\r\n    <h1>your text summary</h1>\r\n    <p>your text containes {text.split(\" \").length} words and {text.length} characters.</p>\r\n    <p>{0.008*text.split(\" \").length} minutes reading time.</p>\r\n  </div>\r\n  </>\r\n  )\r\n}\r\n","\nimport './App.css';\nimport About from './compnents/about';\nimport Navbar from './compnents/Navbar';\nimport TextForm from './compnents/textform';\nimport React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState(`dark`);\n\n  const toggleMode =()=>{\n    if(Mode==='light'){\n      setMode('dark');\n    }\n    else{\n      setMode('light');\n    }\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title=\"React\" mode={Mode} toggleMode={toggleMode}/>\n      <div className=\"container\">\n      <Switch>\n          <Route path=\"/about\">\n            {<About/>}\n          </Route>\n          <Route path=\"/\">\n            {<TextForm heading=\"enter the text here\"/> }\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}